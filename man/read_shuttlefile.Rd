% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_shuttlefile.R
\name{read_shuttlefile}
\alias{read_shuttlefile}
\title{Read and process TRAFx Shuttle Files}
\usage{
read_shuttlefile(
  path,
  tz = Sys.timezone(),
  return = c("both", "counts", "header")
)
}
\arguments{
\item{path}{Character. The file path to either a single \code{.txt} shuttle file
or a folder containing multiple shuttle files.}

\item{tz}{Character. Time zone for timestamp conversion. Defaults to your
computer's time zone.}

\item{return}{Character. Determines what the function returns. Options are:
\itemize{
\item{"counts"} - only the hourly counts data frame.
\item{"header"} - only the metadata/header data frame.
\item{"both"} (default) - a \strong{list} containing two data frames: \code{counts}
and \code{header}.
}}
}
\value{
Depending on the \code{return} argument:
\itemize{
\item If \code{return = "counts"}: a single data frame with all hourly counts.
\item If \code{return = "header"}: a single data frame with counter metadata.
\item If \code{return = "both"}: a \strong{list} with two components:
\describe{
\item{counts}{Data frame with all hourly counts.}
\item{header}{Data frame with counter metadata.}
}
}

This means that when you choose \code{return = "both"}, the function will give you
one object, and you can access the counts data frame with \code{result$counts} and
the header data frame with \code{result$header}.

The structure of each data frame is as follows:

If \code{return = "counts"} or \code{return = "both"}, the \code{counts} data frame has:
\describe{
\item{counter}{Character. Name of the counter unit.}
\item{serial}{Character. Serial number of the counter.}
\item{dateTime}{POSIXct. Combined date and hour of the count. Time zone as specified by \code{tz}.}
\item{date}{Date. The date of the count.}
\item{time}{Character. Hour portion of the count (HH:MM).}
\item{count1}{Numeric. First count channel (if only one sensor attached, all counts are in this column).}
\item{count2}{Numeric. Second count channel (if a second sensor is available; 0 if not used).}
}

If \code{return = "header"} or \code{return = "both"}, the \code{header} data frame has:
\describe{
\item{counter}{Character. Name of the counter unit.}
\item{mode}{Character. Counter mode (e.g. Infrared (IR+) for pedestrian configuration).}
\item{serial}{Character. Serial number of the counter.}
\item{volt}{Character or numeric. Battery voltage at the time of download.}
\item{downloadTime}{POSIXct. Timestamp when the file was downloaded from the counter.}
\item{startTime}{POSIXct. Timestamp when the counter recording period started.}
\item{dockTime}{POSIXct. Timestamp when the counter was physically downloaded via the dock/shuttle (if applicable).}
}
}
\description{
This function reads one or more TRAFx Shuttle Files (.txt) from a single file
or a folder containing multiple files, and returns processed data frames for
analysis. It extracts both the hourly counts recorded by each counter as well
as the download metadata (e.g., serial numbers, timestamps, and counter mode).
}
\examples{
\dontrun{
# Example 1: Read a single file (using included example data)
example_file <- system.file("extdata", "ShuttleFile_EXAMPLE.TXT", package = "recrtools")

# Process the file and return both counts and header information
data <- read_shuttlefile(example_file, return = "both")

# Access each part of the result
counts <- data$counts   # Hourly counts data frame
header <- data$header   # Metadata / header data frame


# Example 2: Read all ShuttleFiles in a data folder using an RStudio project structure
# Assume your RStudio project has the following folder structure:
#   Trail Counter Project/   # Your RStudio project folder
#       ├── data/            # raw ShuttleFiles go here
#       │    └── trafx_downloads/
#       ├── scripts/         # R scripts/functions
#       ├── results/         # processed data or figures
#       └── ...

# The "data/trafx_downloads/" path is relative to the project root.
folder_path <- "data/trafx_downloads/"

# Process all ShuttleFiles in the folder
all_data <- read_shuttlefile(folder_path, return = "both")

# Extract the individual data frames from the list
counts_df <- all_data$counts
header_df <- all_data$header


# Example 3: Read a specific ShuttleFile by path
# Can provide a relative or absolute path to a single file
single_file <- "data/trafx_downloads/TRAFX_2024-06-15.TXT"

# Only return the hourly counts
counts_only <- read_shuttlefile(single_file, return = "counts")
}

}
